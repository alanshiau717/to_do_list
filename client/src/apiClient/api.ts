/* tslint:disable */
/* eslint-disable */
/**
 * to_do_list
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorResponseModel
 */
export interface ErrorResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseModel
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     * Unique Identifier
     * @type {number}
     * @memberof Folder
     */
    'id': number;
    /**
     * Date of creation
     * @type {string}
     * @memberof Folder
     */
    'date_created': string;
    /**
     * Date of update
     * @type {string}
     * @memberof Folder
     */
    'date_updated': string;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Folder
     */
    'done': boolean;
    /**
     * 
     * @type {number}
     * @memberof Folder
     */
    'order': number;
    /**
     * 
     * @type {boolean}
     * @memberof Folder
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {User}
     * @memberof Folder
     */
    'user': User;
    /**
     * 
     * @type {number}
     * @memberof Folder
     */
    'userId': number;
    /**
     * 
     * @type {Array<List>}
     * @memberof Folder
     */
    'lists': Array<List>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Folder
     */
    'listIds': Array<number>;
}
/**
 * 
 * @export
 * @interface IFolder
 */
export interface IFolder {
    /**
     * 
     * @type {number}
     * @memberof IFolder
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof IFolder
     */
    'date_created': string;
    /**
     * 
     * @type {string}
     * @memberof IFolder
     */
    'date_updated': string;
    /**
     * 
     * @type {number}
     * @memberof IFolder
     */
    'order': number;
    /**
     * 
     * @type {boolean}
     * @memberof IFolder
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {IUser}
     * @memberof IFolder
     */
    'user': IUser;
    /**
     * 
     * @type {string}
     * @memberof IFolder
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof IFolder
     */
    'done': boolean;
}
/**
 * 
 * @export
 * @interface IFolderCreateProps
 */
export interface IFolderCreateProps {
    /**
     * 
     * @type {string}
     * @memberof IFolderCreateProps
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof IFolderCreateProps
     */
    'user': number;
}
/**
 * 
 * @export
 * @interface IUser
 */
export interface IUser {
    /**
     * 
     * @type {number}
     * @memberof IUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof IUser
     */
    'date_created': string;
    /**
     * 
     * @type {string}
     * @memberof IUser
     */
    'date_updated': string;
    /**
     * 
     * @type {string}
     * @memberof IUser
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof IUser
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof IUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof IUser
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof IUser
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IUser
     */
    'activated': boolean;
    /**
     * 
     * @type {Array<IFolder>}
     * @memberof IUser
     */
    'folders': Array<IFolder>;
    /**
     * 
     * @type {Array<IUserSession>}
     * @memberof IUser
     */
    'userSessions': Array<IUserSession>;
    /**
     * 
     * @type {Folder}
     * @memberof IUser
     */
    'defaultFolder': Folder;
    /**
     * 
     * @type {number}
     * @memberof IUser
     */
    'defaultFolderId': number;
    /**
     * 
     * @type {List}
     * @memberof IUser
     */
    'inbox': List;
    /**
     * 
     * @type {number}
     * @memberof IUser
     */
    'inboxId': number;
    /**
     * 
     * @type {string}
     * @memberof IUser
     */
    'googleUserSub': string;
}
/**
 * 
 * @export
 * @interface IUserCreateProps
 */
export interface IUserCreateProps {
    /**
     * 
     * @type {string}
     * @memberof IUserCreateProps
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUserCreateProps
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUserCreateProps
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUserCreateProps
     */
    'password'?: string;
    /**
     * 
     * @type {number}
     * @memberof IUserCreateProps
     */
    'defaultFolder'?: number;
    /**
     * 
     * @type {number}
     * @memberof IUserCreateProps
     */
    'inbox'?: number;
    /**
     * 
     * @type {string}
     * @memberof IUserCreateProps
     */
    'googleUserSub'?: string;
}
/**
 * 
 * @export
 * @interface IUserSession
 */
export interface IUserSession {
    /**
     * 
     * @type {number}
     * @memberof IUserSession
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof IUserSession
     */
    'date_created': string;
    /**
     * 
     * @type {string}
     * @memberof IUserSession
     */
    'date_updated': string;
    /**
     * 
     * @type {IUser}
     * @memberof IUserSession
     */
    'user': IUser;
    /**
     * 
     * @type {boolean}
     * @memberof IUserSession
     */
    'isRevoked': boolean;
}
/**
 * 
 * @export
 * @interface List
 */
export interface List {
    /**
     * 
     * @type {number}
     * @memberof List
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof List
     */
    'date_created': string;
    /**
     * 
     * @type {string}
     * @memberof List
     */
    'date_updated': string;
    /**
     * 
     * @type {string}
     * @memberof List
     */
    'name': string;
    /**
     * 
     * @type {User}
     * @memberof List
     */
    'user': User;
    /**
     * 
     * @type {Folder}
     * @memberof List
     */
    'folder': Folder;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    'order': number;
    /**
     * 
     * @type {boolean}
     * @memberof List
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof List
     */
    'done': boolean;
}
/**
 * 
 * @export
 * @interface LogInRequest
 */
export interface LogInRequest {
    /**
     * 
     * @type {string}
     * @memberof LogInRequest
     */
    'idToken': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickIUserEmailOrPassword
 */
export interface PickIUserEmailOrPassword {
    /**
     * 
     * @type {string}
     * @memberof PickIUserEmailOrPassword
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserEmailOrPassword
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique Identifier
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * Date of creation
     * @type {string}
     * @memberof User
     */
    'date_created': string;
    /**
     * Date of update
     * @type {string}
     * @memberof User
     */
    'date_updated': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'googleUserSub': string;
    /**
     * 
     * @type {Array<Folder>}
     * @memberof User
     */
    'folders': Array<Folder>;
    /**
     * 
     * @type {Array<UserSession>}
     * @memberof User
     */
    'userSessions': Array<UserSession>;
    /**
     * 
     * @type {Folder}
     * @memberof User
     */
    'defaultFolder': Folder;
    /**
     * 
     * @type {List}
     * @memberof User
     */
    'inbox': List;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'defaultFolderId': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'inboxId': number;
}
/**
 * 
 * @export
 * @interface UserLoginResponse
 */
export interface UserLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof UserLoginResponse
     */
    'accessToken': string;
    /**
     * 
     * @type {number}
     * @memberof UserLoginResponse
     */
    'defaultFolder': number;
    /**
     * 
     * @type {number}
     * @memberof UserLoginResponse
     */
    'inbox': number;
}
/**
 * 
 * @export
 * @interface UserSession
 */
export interface UserSession {
    /**
     * 
     * @type {number}
     * @memberof UserSession
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserSession
     */
    'date_created': string;
    /**
     * 
     * @type {string}
     * @memberof UserSession
     */
    'date_updated': string;
    /**
     * 
     * @type {User}
     * @memberof UserSession
     */
    'user': User;
    /**
     * 
     * @type {boolean}
     * @memberof UserSession
     */
    'isRevoked': boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<IUser> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FoldersApi - axios parameter creator
 * @export
 */
export const FoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IFolderCreateProps} iFolderCreateProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder: async (iFolderCreateProps: IFolderCreateProps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iFolderCreateProps' is not null or undefined
            assertParamExists('createFolder', 'iFolderCreateProps', iFolderCreateProps)
            const localVarPath = `/folder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iFolderCreateProps, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/folder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoldersApi - functional programming interface
 * @export
 */
export const FoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {IFolderCreateProps} iFolderCreateProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolder(iFolderCreateProps: IFolderCreateProps, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IFolder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFolder(iFolderCreateProps, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolder(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IFolder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolder(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoldersApi - factory interface
 * @export
 */
export const FoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoldersApiFp(configuration)
    return {
        /**
         * 
         * @param {IFolderCreateProps} iFolderCreateProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(iFolderCreateProps: IFolderCreateProps, options?: any): AxiosPromise<IFolder> {
            return localVarFp.createFolder(iFolderCreateProps, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder(options?: any): AxiosPromise<Array<IFolder>> {
            return localVarFp.getFolder(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export class FoldersApi extends BaseAPI {
    /**
     * 
     * @param {IFolderCreateProps} iFolderCreateProps 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public createFolder(iFolderCreateProps: IFolderCreateProps, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).createFolder(iFolderCreateProps, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public getFolder(options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).getFolder(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LogInRequest} logInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin: async (logInRequest: LogInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logInRequest' is not null or undefined
            assertParamExists('googleLogin', 'logInRequest', logInRequest)
            const localVarPath = `/user/googleLogin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PickIUserEmailOrPassword} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nativeUserLogin: async (body: PickIUserEmailOrPassword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('nativeUserLogin', 'body', body)
            const localVarPath = `/user/nativeUserLogin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IUserCreateProps} iUserCreateProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nativeUserSignUp: async (iUserCreateProps: IUserCreateProps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iUserCreateProps' is not null or undefined
            assertParamExists('nativeUserSignUp', 'iUserCreateProps', iUserCreateProps)
            const localVarPath = `/user/nativeUserSignup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUserCreateProps, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LogInRequest} logInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleLogin(logInRequest: LogInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleLogin(logInRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PickIUserEmailOrPassword} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nativeUserLogin(body: PickIUserEmailOrPassword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nativeUserLogin(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IUserCreateProps} iUserCreateProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nativeUserSignUp(iUserCreateProps: IUserCreateProps, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nativeUserSignUp(iUserCreateProps, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {LogInRequest} logInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin(logInRequest: LogInRequest, options?: any): AxiosPromise<UserLoginResponse> {
            return localVarFp.googleLogin(logInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PickIUserEmailOrPassword} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nativeUserLogin(body: PickIUserEmailOrPassword, options?: any): AxiosPromise<UserLoginResponse> {
            return localVarFp.nativeUserLogin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IUserCreateProps} iUserCreateProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nativeUserSignUp(iUserCreateProps: IUserCreateProps, options?: any): AxiosPromise<object> {
            return localVarFp.nativeUserSignUp(iUserCreateProps, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {LogInRequest} logInRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public googleLogin(logInRequest: LogInRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).googleLogin(logInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PickIUserEmailOrPassword} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public nativeUserLogin(body: PickIUserEmailOrPassword, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).nativeUserLogin(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IUserCreateProps} iUserCreateProps 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public nativeUserSignUp(iUserCreateProps: IUserCreateProps, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).nativeUserSignUp(iUserCreateProps, options).then((request) => request(this.axios, this.basePath));
    }
}


